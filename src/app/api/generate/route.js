import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import db_operations from '@/lib/db';
import crypto from 'crypto';

export async function POST(request) {
  try {
    const session = await getServerSession(authOptions);
    console.log('Session in generate API:', session); // Debug log
    
    if (!session?.user?.id) {
      console.error('Unauthorized access attempt:', session);
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { specialty, systemPrompt, patientInfo } = await request.json();

    if (!specialty || !systemPrompt || !patientInfo) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Initialize database
    await db_operations.initializeDatabase();

    // Here you would typically call your AI model API
    // For now, we'll create a mock response
    const generatedReport = `
Medical Report
Generated on: ${new Date().toLocaleString()}
Specialty: ${specialty}

${systemPrompt}

Patient Information:
${patientInfo}

Assessment:
Based on the provided information, this is a sample medical report that demonstrates the format.
The actual implementation would use an AI model to generate a proper medical report.

Plan:
1. Continue current treatment plan
2. Follow up in 2 weeks
3. Monitor symptoms and report any changes

Notes:
This is a sample report. In production, this would be generated by an AI model based on the provided information.
`;

    // Save the report with all fields
    const id = crypto.randomUUID();
    const now = new Date().toISOString();
    const title = `${specialty} Report - ${new Date().toLocaleDateString()}`;

    console.log('Saving generated report:', {
      id,
      title,
      specialty,
      content: generatedReport.substring(0, 100) + '...',
      user_id: session.user.id
    });

    await db_operations.run(
      `INSERT INTO reports (
        id, title, content, specialty, patient_info, system_prompt,
        user_id, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        id,
        title,
        generatedReport,
        specialty,
        patientInfo,
        systemPrompt,
        session.user.id,
        now,
        now
      ]
    );

    // Get the created report
    const savedReport = await db_operations.get(
      'SELECT * FROM reports WHERE id = ?',
      [id]
    );

    console.log('Saved report:', savedReport);

    return NextResponse.json({
      message: 'Report generated and saved successfully',
      report: savedReport
    }, { status: 201 });

  } catch (error) {
    console.error('Error generating report:', error);
    return NextResponse.json(
      { error: 'Error generating report' },
      { status: 500 }
    );
  }
}
