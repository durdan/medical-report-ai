// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id         String   @id @default(uuid())
  name       String?
  email      String   @unique
  emailVerified DateTime?
  password   String
  image      String?
  role       String   @default("USER")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  accounts   Account[]
  sessions   Session[]
  reports    Report[]
  prompts    Prompt[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id         String   @id @default(uuid())
  title      String
  findings   String   @db.Text
  report     String   @db.Text
  specialty  String
  promptId   String?  @map("prompt_id")
  userId     String   @map("user_id")
  isArchived Boolean  @default(false) @map("is_archived")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  prompt     Prompt?  @relation(fields: [promptId], references: [id])

  @@map("reports")
  @@index([userId])
  @@index([specialty])
  @@index([createdAt])
}

model Prompt {
  id         String   @id @default(uuid())
  name       String
  promptText String   @db.Text @map("prompt_text")
  specialty  String
  isDefault  Boolean  @default(false) @map("is_default")
  isSystem   Boolean  @default(false) @map("is_system")
  userId     String?  @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User?    @relation(fields: [userId], references: [id])
  reports    Report[]

  @@map("prompts")
  @@index([userId])
  @@index([specialty])
}
